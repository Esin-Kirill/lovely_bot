import re
import requests
from random import choice, randint
from telebot import TeleBot, types
import time
import schedule
import threading
from configs import *


# GLOBALS 
TO_SEND = {}
URL_WEATHER = 'https://www.gismeteo.ru'
URL_MUSIC = 'https://music.yandex.ru/genres'

# INIT 
bot = TeleBot(TOKEN)

# INLINE KEYBORD\BUTTONS
inlineKB = types.InlineKeyboardMarkup
inlineBTN = types.InlineKeyboardButton

# REPLY KEYBORD\BUTTONS
replyKB = types.ReplyKeyboardMarkup
replyBTN = types.KeyboardButton
replyKBRMV = types.ReplyKeyboardRemove

# FUNCS
def job():
    bot.send_message(ADMIN_CHAT_ID, '–ü—Ä–∏–≤–µ—Ç!')

def send_to_ADMIN(bot, msg):
    text = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª—é–±–∏–º–∫–∏:\n{msg.text}'
    bot.send_message(ADMIN_CHAT_ID, text)
    bot.send_message(msg.chat.id, """–ü–µ—Ä–µ–¥–∞–ª —Ç–≤–æ—é –ø—Ä–æ—Å—å–±—É :) –ü—Ä–æ–¥–æ–ª–∂–∏–º?""")

        
# Generates morning message from lists of random texts\smiles\names
def generate_morning_msg():
    text = choice(MORNING_MSGS)
    name = choice(MORNING_NAMES)
    smile = choice(MORNING_SMLS)
    msg = f"{text}, {name} {smile}"
    return msg

# Generates random photo for quote -> returns picture
def generate_quote_picture(text):
    global PIXABY_TOKEN

    try:
        text = [re.sub(r'[^–∞-—è—ë]', ' ', word, flags=re.IGNORECASE) for word in text.split(' ')]
        text = [word.strip() for word in text]
        q = '+'.join(sorted(text, reverse=True)[:2])
        url = f'https://pixabay.com/api/?key={PIXABY_TOKEN}&q={q}&lang=ru'
        result = requests.get(url, headers=USER_AGENT).json()

        hits = result['hits']
        ind = randint(0, len(hits)-1)
        link = hits[ind]['webformatURL']
    except:
        categories = ['backgrounds', 'fashion', 'nature', 'science', 'education', 'feelings',
                    'health', 'people', 'places', 'animals', 'food', 'sports', 'travel', 'buildings', 'music']
        category = choice(categories)
        url = f'https://pixabay.com/api/?key={PIXABY_TOKEN}&category={category}'
        result = requests.get(url, headers=USER_AGENT).json()

        hits = result['hits']
        ind = randint(0, len(hits)-1)
        link = hits[ind]['webformatURL']

    return link

# Generates random quote -> returns quote
def generate_quote():
    # Quote
    params = {'method':'getQuote', 'lang':'ru', 'format':'json'}
    url = 'http://api.forismatic.com/api/1.0/'

    result = requests.get(url, params=params).json()
    quote = result['quoteText']
    author = result['quoteAuthor'] if result['quoteAuthor'] != '' else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'
    
    # Quote picture
    quote_picture1 = requests.get('https://aws.random.cat/meow', headers=USER_AGENT).json()['file'] 
    quote_picture2 = requests.get('https://random.dog/woof.json', headers=USER_AGENT).json()['url'] 
    quote_picture = choice([quote_picture1, quote_picture2])
    quote = f'<b>{quote}</b>\n\n<i>\U000000A9 {author}</i>'
    
    return quote, quote_picture

# Generates random answer (yes, no, maybe) and relevant gif
def generate_yesno():
    options = {
                'yes': ['–ü–æ–∂–∞–ª—É–π, –¥–∞', '–î–∞, –¥–∞ –∏ –µ—â—ë —Ä–∞–∑ –¥–∞!', '–ú–æ–∂–µ—Ç –∫–∞–∫-–Ω–∏–±—É–¥—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑? (–ù–µ—Ç)',
                        '–ï—Å—Ç–µ—Å—Å–Ω–∞, –∞ –±—ã–ª–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã?', '–ê –ø–æ—á–µ–º—É –±—ã –∏... –î–∞!)',
                        '–ö–æ–Ω–µ—á–Ω–æ –∂–µ - –¥–∞!', '–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ.', '–ü—Ä–æ—Å—Ç–æ –¥–∞ –∏ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –ø–æ—á–µ–º—É...'],
                'no': ['–î–∞ –Ω–µ... –ö–æ–º—É –æ–Ω–æ –Ω–∞–¥–æ :)', '–ê –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç',
                        '–ù–µ—Ç', '–ö–æ–Ω–µ—á–Ω–æ –∂–µ... –Ω–µ—Ç!', '–ê—Ö –∏ —É–≤—ã, –Ω–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–∏...',
                        '–ú–æ–∂–µ—Ç –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑?)', '–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ - –Ω–µ—Ç.', '–ù–µ —Å—Ç–æ–∏—Ç...'],
                'maybe': ['–ù—É, –≤–æ–∑–º–æ–∂–Ω–æ...', '–•–∑-—Ö–∑-—Ö–∑...', '–ë—ã—Ç—å –∏–ª–∏ –Ω–µ –±—ã—Ç—å? –•–∑ :)', '–£–≤—ã, –Ω–µ –º–æ–≥—É –Ω–∏—á–µ–º –ø–æ–º–æ—á—å.',
                          '–°–∞–º –Ω–µ –∑–Ω–∞—é :(']
            }
    url = 'https://yesno.wtf/api'
    result = requests.get(url, headers=USER_AGENT).json()
    answer = result['answer']
    answer = choice(options[answer])
    url_gif = result['image']

    return answer, url_gif

# Translates text from en to ru -> returns transalted text
def translate_en_ru(text):
    text_new = text.encode('utf-8')
    url = "https://google-translate1.p.rapidapi.com/language/translate/v2"
    payload = f"source=en&target=ru&q={text_new}"
    headers = {
        "content-type": "application/x-www-form-urlencoded",
        "Accept-Encoding": "application/gzip",
        "X-RapidAPI-Host": "google-translate1.p.rapidapi.com",
        "X-RapidAPI-Key": "16d81c9d27msh9268823dda8e89bp15d511jsn154bc248ca9e"
    }
    result = requests.request("POST", url, data=payload, headers=headers).json()
    transl = result['data']['translations'][0]['translatedText']
    return transl

# Checks text answer from main keybord
def check_answer(message):
    messages = ['–ø–æ–≥–æ–¥–∞', '–º—É–∑—ã–∫–∞', '—Ü–∏—Ç–∞—Ç–∞', '—Ñ–∞–∫—Ç—ã', 'english', '–¥—Ä—É–≥–æ–µ', '–¥–∞\–Ω–µ—Ç', '–ø–æ–∏—Å–∫']
    if message.text.lower() in messages:
        return True
    else:
        return False

# Bot make a google search
def make_a_search(message):
    url = f'https://www.google.com/search?q={message.text}'
    msg = f'<a href="{url}">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã üë©‚Äçüíª</a>'
    bot.send_message(message.chat.id, msg, parse_mode='HTML')

# Morning message 
def bot_send_morning_msg(chat_id):
    msg = generate_morning_msg()
    bot.send_message(chat_id, msg)


# BOT methods
@bot.message_handler(func=lambda message: message.from_user.username not in USERS)
def some(message):
    # Msg for unknown user
    msg = "Permission denied \U0001F6A8"
    bot.send_message(message.chat.id, msg)

    # Msg for ADMIN
    msg = f"–ö–∞–∫–æ–π-—Ç–æ {message.from_user.username} –Ω–∞—à—ë–ª –±–æ—Ç–∞ –∏ –ø—ã—Ç–∞–ª—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è."
    bot.send_message(ADMIN_CHAT_ID, msg)


@bot.message_handler(commands=['help'])
def bot_send_help(message):
    kb = replyKB(row_width=2, resize_keyboard=True)
    btn1 = replyBTN('–ü–æ–≥–æ–¥–∞')
    btn2 = replyBTN('–ú—É–∑—ã–∫–∞')
    btn3 = replyBTN('–¶–∏—Ç–∞—Ç–∞')
    btn4 = replyBTN('–î–∞\–ù–µ—Ç')
    btn5 = replyBTN('–ü–æ–∏—Å–∫')
    btn6 = replyBTN('–î—Ä—É–≥–æ–µ')
    kb.add(btn1, btn2, btn3, btn4, btn5, btn6)

    bot.send_message(message.chat.id, MSG_HELP, reply_markup=kb, parse_mode='HTML')

@bot.message_handler(commands=['start'])
def bot_start(message):
    global TO_SEND

    if message.chat.id not in TO_SEND and TO_SEND.get(message.chat.id) != True:
        TO_SEND[message.chat.id] = True
        schedule.every().day.at("04:00").do(bot_send_morning_msg, message.chat.id)
    
    kb = replyKB(row_width=2, resize_keyboard=True)
    btn1 = replyBTN('–ü–æ–≥–æ–¥–∞')
    btn2 = replyBTN('–ú—É–∑—ã–∫–∞')
    btn3 = replyBTN('–¶–∏—Ç–∞—Ç–∞')
    btn4 = replyBTN('–î–∞\–ù–µ—Ç')
    btn5 = replyBTN('–ü–æ–∏—Å–∫')
    btn6 = replyBTN('–î—Ä—É–≥–æ–µ')
    kb.add(btn1, btn2, btn3, btn4, btn5, btn6)

    bot.send_message(message.chat.id, MSG_WELCOME, reply_markup=kb, parse_mode='HTML')

# Text calllback handler (from replay keyboard)
@bot.message_handler(func=lambda x: check_answer(x))
def bot_process_callback(message):
    message_text = message.text.lower()
    chat_id = message.chat.id

    if message_text == '–ø–æ–≥–æ–¥–∞':
        msg = f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≥–æ–¥–∞ –Ω–∞ <a href="{URL_WEATHER}">—Å–µ–≥–æ–¥–Ω—è</a>"""
        bot.send_message(chat_id, msg, parse_mode='HTML')
    
    if message_text == '–º—É–∑—ã–∫–∞':
        msg = f"""–í—ã–±–∏—Ä–∞–π –º—É–∑—ã–∫—É –ø–æ–¥ —Å–≤–æ—ë <a href="{URL_MUSIC}">–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</a>"""
        bot.send_message(chat_id, msg, parse_mode='HTML')

    if message_text == '—Ü–∏—Ç–∞—Ç–∞':
        quote_text, quote_picture = generate_quote()
        bot.send_photo(chat_id, photo=quote_picture, caption=quote_text, parse_mode='HTML')

    if message_text == '–¥–∞\–Ω–µ—Ç':
        bot_yesno(message)

    if message_text == '—Ñ–∞–∫—Ç—ã':
        msg = '–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â—ë –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.'
        bot.send_message(chat_id, msg)

    if message_text == '–ø–æ–∏—Å–∫':
        answer = bot.send_message(chat_id, '–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å \U0001F440')
        bot.register_next_step_handler(answer, make_a_search)
        # bot_teach_english(message)

    if message_text == '–¥—Ä—É–≥–æ–µ':
        msg = """–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —á—Ç–æ-–Ω–∏–±—É–¥—å —Å—é–¥–∞ –¥–æ–±–∞–≤–∏–ª, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –ø–µ—Ä–µ—à–ª—é —Ç–≤–æ—é –ø—Ä–æ—Å—å–±—É :)"""
        answer = bot.send_message(chat_id, msg)
        bot.register_next_step_handler(answer, send_to_ADMIN)


# Calllback handler
@bot.callback_query_handler(func=lambda x: x.data)
def bot_process_callback(call):
    if call.data == 'weather':
        msg = f"""–û–ø... –ü–æ–≥–æ–¥–∫–∞ –Ω–∞ <a href="{URL_WEATHER}">—Å–µ–≥–æ–¥–Ω—è</a>"""
        bot.send_message(call.message.chat.id, msg, parse_mode='HTML')
    
    if call.data == 'music':
        msg = f"""–ú–º–º... –∏ –∫–∞–∫–æ–µ –∂–µ —Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è <a href="{URL_MUSIC}">–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</a>?"""
        bot.send_message(call.message.chat.id, msg, parse_mode='HTML')

    if call.data == 'quote':
        quote_text, quote_picture = generate_quote()
        bot.send_photo(call.message.chat.id, photo=quote_picture, caption=quote_text, parse_mode='HTML')

    if call.data == 'exit':
        msg = """–û–∫–∞—É... –ß–µ–º —Ç–æ–≥–¥–∞ –∑–∞–π–º—ë–º—Å—è? \U0001F60F\n(–ø—Ä–∏—à–ª–∏ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
        bot.send_message(call.message.chat.id, msg)


@bot.message_handler(commands=['yesno'])
def bot_yesno(message):
    text1 = '–ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è \U000023F3'
    text2 = '–ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥—É, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è \U0000231B'
    message = bot.send_message(message.chat.id, text1)

    for _ in range(2):
        time.sleep(0.3)
        bot.edit_message_text(text2, message.chat.id, message.id)
        time.sleep(0.3)
        bot.edit_message_text(text1, message.chat.id, message.id)
    
    answer, gif_link = generate_yesno()
    bot.send_animation(message.chat.id, gif_link, caption=answer)


@bot.message_handler(content_types=['text'])
def bot_reply_text(message):
    msg = "–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫... –ú–æ–∂–µ—Ç, –≤ –±—É–¥—É—â–µ–º, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ - –Ω–µ—Ç :("
    bot.send_message(message.chat.id, msg)


if __name__ == '__main__':
    threading.Thread(target=bot.infinity_polling, name='bot_infinity_polling', daemon=True).start()

    while True:
        schedule.run_pending()
        time.sleep(1)
